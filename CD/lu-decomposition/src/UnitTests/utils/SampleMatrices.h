/***************************************************************************
                          SampleMatrices.h  -  description
                             -------------------
    begin                : Nov 1, 2021
    copyright            : (C) 2021 by Tomas Oberhuber et al.
    email                : tomas.oberhuber@fjfi.cvut.cz
 ***************************************************************************/

/* See Copyright Notice in tnl/Copyright */

#pragma once

namespace Decomposition {

   template< typename Matrix >
   class SampleMatrices
   {
      // To quickly add data from a .mtx file, use Sublime Text 3 and its replace functionality:
      // Search for (using regex):
      //    (\d+)[ ](\d+)[ ]([-]*[0-9]*.\d+)
      // Replace with:
      //    A.setElement( $1, $2, $3 );
      public:

         using RealType = typename Matrix::RealType;
         using IndexType = typename Matrix::IndexType;

         // Data source: https://suitesparse-collection-website.herokuapp.com/MM/Oberwolfach/LF10.tar.gz
         class LF10
         {
            public:

               const static IndexType numCols = 19;

               // Disclaimer: .mtx files start indexing from 1, not 0, so just add an element at 0, 0.
               static void loadMatrixA( Matrix& A )
               {
                  A.setElement( 0, 0, 1 );
                  A.setElement( 1, 1, 3.5344800000000003 );
                  A.setElement( 2, 1, -477.1548 );
                  A.setElement( 3, 1, 1.7672400000000001 );
                  A.setElement( 2, 2, 171775.728 );
                  A.setElement( 4, 2, -85887.864 );
                  A.setElement( 5, 2, 477.1548 );
                  A.setElement( 3, 3, 7.068960000000001 );
                  A.setElement( 4, 3, -477.1548 );
                  A.setElement( 5, 3, 1.7672400000000001 );
                  A.setElement( 4, 4, 171775.728 );
                  A.setElement( 6, 4, -85887.864 );
                  A.setElement( 7, 4, 477.1548 );
                  A.setElement( 5, 5, 7.068960000000001 );
                  A.setElement( 6, 5, -477.1548 );
                  A.setElement( 7, 5, 1.7672400000000001 );
                  A.setElement( 6, 6, 171775.728 );
                  A.setElement( 8, 6, -85887.864 );
                  A.setElement( 9, 6, 477.1548 );
                  A.setElement( 7, 7, 7.068960000000001 );
                  A.setElement( 8, 7, -477.1548 );
                  A.setElement( 9, 7, 1.7672400000000001 );
                  A.setElement( 8, 8, 171775.728 );
                  A.setElement( 10, 8, -85887.864 );
                  A.setElement( 11, 8, 477.1548 );
                  A.setElement( 9, 9, 7.068960000000001 );
                  A.setElement( 10, 9, -477.1548 );
                  A.setElement( 11, 9, 1.7672400000000001 );
                  A.setElement( 10, 10, 171775.728 );
                  A.setElement( 12, 10, -85887.864 );
                  A.setElement( 13, 10, 477.1548 );
                  A.setElement( 11, 11, 7.068960000000001 );
                  A.setElement( 12, 11, -477.1548 );
                  A.setElement( 13, 11, 1.7672400000000001 );
                  A.setElement( 12, 12, 171775.728 );
                  A.setElement( 14, 12, -85887.864 );
                  A.setElement( 15, 12, 477.1548 );
                  A.setElement( 13, 13, 7.068960000000001 );
                  A.setElement( 14, 13, -477.1548 );
                  A.setElement( 15, 13, 1.7672400000000001 );
                  A.setElement( 14, 14, 171775.728 );
                  A.setElement( 16, 14, -85887.864 );
                  A.setElement( 17, 14, 477.1548 );
                  A.setElement( 15, 15, 7.068960000000001 );
                  A.setElement( 16, 15, -477.1548 );
                  A.setElement( 17, 15, 1.7672400000000001 );
                  A.setElement( 16, 16, 171775.728 );
                  A.setElement( 18, 16, 477.1548 );
                  A.setElement( 17, 17, 7.068960000000001 );
                  A.setElement( 18, 17, 1.7672400000000001 );
                  A.setElement( 18, 18, 3.5344800000000003 );
               };

               // Obtained using MATLAB LU Crout decomposition
               static void loadMatrixLRowMajor( std::vector< RealType >& l )
               {
                  l = {
                     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 3.53448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, -477.155, 171776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 1.76724, 0, 7.06896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, -85887.9, -477.155, 171776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 477.155, 1.76724, 0, 7.06896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, -85887.9, -477.155, 171776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 477.155, 1.76724, 0, 7.06896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, -85887.9, -477.155, 171776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 477.155, 1.76724, 0, 7.06896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, -85887.9, -477.155, 171776, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 477.155, 1.76724, 0, 7.06896, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85887.9, -477.155, 171776, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 477.155, 1.76724, 0, 7.06896, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85887.9, -477.155, 171776, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 477.155, 1.76724, 0, 7.06896, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85887.9, -477.155, 171776, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 477.155, 1.76724, 0, 7.06896, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 477.155, 1.76724, 3.53448
                  };
               };

               static void loadMatrixURowMajor( std::vector< RealType >& u )
               {
                  u = {
                     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
                  };
               };

               static void loadMatrixZRowMajor( std::vector< RealType >& z )
               {
                  loadMatrixLRowMajor( z );
               };
         };

         // Data source: https://www.cise.ufl.edu/research/sparse/MM/vanHeukelum/cage5.tar.gz
         class cage5
         {
            public:

               const static IndexType numCols = 38;

               static void loadMatrixA( Matrix &A )
               {
                  A.setElement( 0, 0, 1);
                  A.setElement( 1, 1, .8 );
                  A.setElement( 2, 1, .0600221336916696 );
                  A.setElement( 8, 1, .0733111996416637 );
                  A.setElement( 11, 1, .0300110668458348 );
                  A.setElement( 18, 1, .0366555998208319 );
                  A.setElement( 1, 2, .109966799462496 );
                  A.setElement( 2, 2, .750055334229174 );
                  A.setElement( 7, 2, .0733111996416637 );
                  A.setElement( 11, 2, .0300110668458348 );
                  A.setElement( 14, 2, .0366555998208319 );
                  A.setElement( 3, 3, .763344400179168 );
                  A.setElement( 4, 3, .0900332005375044 );
                  A.setElement( 9, 3, .0733111996416637 );
                  A.setElement( 12, 3, .0366555998208319 );
                  A.setElement( 16, 3, .0366555998208319 );
                  A.setElement( 3, 4, .146622399283327 );
                  A.setElement( 4, 4, .780066401075009 );
                  A.setElement( 12, 4, .0733111996416637 );
                  A.setElement( 5, 5, .769988933154165 );
                  A.setElement( 6, 5, .0600221336916696 );
                  A.setElement( 10, 5, .109966799462496 );
                  A.setElement( 13, 5, .0300110668458348 );
                  A.setElement( 17, 5, .0300110668458348 );
                  A.setElement( 5, 6, .219933598924991 );
                  A.setElement( 6, 6, .720044267383339 );
                  A.setElement( 13, 6, .0600221336916696 );
                  A.setElement( 2, 7, .0900332005375044 );
                  A.setElement( 7, 7, .733333333333333 );
                  A.setElement( 8, 7, .109966799462496 );
                  A.setElement( 14, 7, .0366555998208319 );
                  A.setElement( 15, 7, .0300110668458348 );
                  A.setElement( 1, 8, .0900332005375044 );
                  A.setElement( 7, 8, .0600221336916696 );
                  A.setElement( 8, 8, .783277999104159 );
                  A.setElement( 15, 8, .0300110668458348 );
                  A.setElement( 18, 8, .0366555998208319 );
                  A.setElement( 3, 9, .180066401075009 );
                  A.setElement( 9, 9, .746622399283327 );
                  A.setElement( 16, 9, .0733111996416637 );
                  A.setElement( 5, 10, .120044267383339 );
                  A.setElement( 10, 10, .819933598924991 );
                  A.setElement( 17, 10, .0600221336916696 );
                  A.setElement( 1, 11, .109966799462496 );
                  A.setElement( 2, 11, .0600221336916696 );
                  A.setElement( 11, 11, .630011066845835 );
                  A.setElement( 12, 11, .0600221336916696 );
                  A.setElement( 15, 11, .0733111996416637 );
                  A.setElement( 25, 11, .0300110668458348 );
                  A.setElement( 34, 11, .0366555998208319 );
                  A.setElement( 3, 12, .0733111996416637 );
                  A.setElement( 4, 12, .0900332005375044 );
                  A.setElement( 11, 12, .109966799462496 );
                  A.setElement( 12, 12, .586710934050006 );
                  A.setElement( 16, 12, .0733111996416637 );
                  A.setElement( 25, 12, .0300110668458348 );
                  A.setElement( 35, 12, .0366555998208319 );
                  A.setElement( 5, 13, .109966799462496 );
                  A.setElement( 6, 13, .0600221336916696 );
                  A.setElement( 13, 13, .563344400179168 );
                  A.setElement( 14, 13, .0900332005375044 );
                  A.setElement( 17, 13, .109966799462496 );
                  A.setElement( 26, 13, .0366555998208319 );
                  A.setElement( 33, 13, .0300110668458348 );
                  A.setElement( 2, 14, .0900332005375044 );
                  A.setElement( 7, 14, .0733111996416637 );
                  A.setElement( 13, 14, .0733111996416637 );
                  A.setElement( 14, 14, .586710934050006 );
                  A.setElement( 18, 14, .109966799462496 );
                  A.setElement( 26, 14, .0366555998208319 );
                  A.setElement( 34, 14, .0300110668458348 );
                  A.setElement( 7, 15, .0600221336916696 );
                  A.setElement( 8, 15, .109966799462496 );
                  A.setElement( 11, 15, .0900332005375044 );
                  A.setElement( 15, 15, .613289065949994 );
                  A.setElement( 16, 15, .0600221336916696 );
                  A.setElement( 27, 15, .0300110668458348 );
                  A.setElement( 34, 15, .0366555998208319 );
                  A.setElement( 3, 16, .0900332005375044 );
                  A.setElement( 9, 16, .0733111996416637 );
                  A.setElement( 12, 16, .0900332005375044 );
                  A.setElement( 15, 16, .109966799462496 );
                  A.setElement( 16, 16, .569988933154165 );
                  A.setElement( 27, 16, .0300110668458348 );
                  A.setElement( 35, 16, .0366555998208319 );
                  A.setElement( 5, 17, .0600221336916696 );
                  A.setElement( 10, 17, .109966799462496 );
                  A.setElement( 13, 17, .0600221336916696 );
                  A.setElement( 17, 17, .613289065949994 );
                  A.setElement( 18, 17, .0900332005375044 );
                  A.setElement( 28, 17, .0366555998208319 );
                  A.setElement( 33, 17, .0300110668458348 );
                  A.setElement( 1, 18, .0900332005375044 );
                  A.setElement( 8, 18, .0733111996416637 );
                  A.setElement( 14, 18, .0600221336916696 );
                  A.setElement( 17, 18, .0733111996416637 );
                  A.setElement( 18, 18, .636655599820832 );
                  A.setElement( 28, 18, .0366555998208319 );
                  A.setElement( 34, 18, .0300110668458348 );
                  A.setElement( 19, 19, .636655599820832 );
                  A.setElement( 20, 19, .0600221336916696 );
                  A.setElement( 21, 19, .0600221336916696 );
                  A.setElement( 23, 19, .0366555998208319 );
                  A.setElement( 25, 19, .0733111996416637 );
                  A.setElement( 27, 19, .0366555998208319 );
                  A.setElement( 28, 19, .0300110668458348 );
                  A.setElement( 29, 19, .0300110668458348 );
                  A.setElement( 31, 19, .0366555998208319 );
                  A.setElement( 19, 20, .146622399283327 );
                  A.setElement( 20, 20, .630011066845835 );
                  A.setElement( 22, 20, .0300110668458348 );
                  A.setElement( 25, 20, .0733111996416637 );
                  A.setElement( 26, 20, .0600221336916696 );
                  A.setElement( 29, 20, .0600221336916696 );
                  A.setElement( 19, 21, .0733111996416637 );
                  A.setElement( 21, 21, .630011066845835 );
                  A.setElement( 22, 21, .0300110668458348 );
                  A.setElement( 24, 21, .0733111996416637 );
                  A.setElement( 25, 21, .0366555998208319 );
                  A.setElement( 26, 21, .0300110668458348 );
                  A.setElement( 28, 21, .0600221336916696 );
                  A.setElement( 30, 21, .0300110668458348 );
                  A.setElement( 32, 21, .0366555998208319 );
                  A.setElement( 20, 22, .109966799462496 );
                  A.setElement( 21, 22, .219933598924991 );
                  A.setElement( 22, 22, .490033200537504 );
                  A.setElement( 26, 22, .120044267383339 );
                  A.setElement( 30, 22, .0600221336916696 );
                  A.setElement( 19, 23, .180066401075009 );
                  A.setElement( 23, 23, .509966799462495 );
                  A.setElement( 24, 23, .0900332005375044 );
                  A.setElement( 27, 23, .146622399283327 );
                  A.setElement( 31, 23, .0733111996416637 );
                  A.setElement( 21, 24, .120044267383339 );
                  A.setElement( 23, 24, .0366555998208319 );
                  A.setElement( 24, 24, .636655599820832 );
                  A.setElement( 27, 24, .0733111996416637 );
                  A.setElement( 28, 24, .0600221336916696 );
                  A.setElement( 32, 24, .0733111996416637 );
                  A.setElement( 11, 25, .109966799462496 );
                  A.setElement( 12, 25, .0600221336916696 );
                  A.setElement( 19, 25, .146622399283327 );
                  A.setElement( 20, 25, .0600221336916696 );
                  A.setElement( 21, 25, .0600221336916696 );
                  A.setElement( 25, 25, .393355467025003 );
                  A.setElement( 27, 25, .0733111996416637 );
                  A.setElement( 28, 25, .0300110668458348 );
                  A.setElement( 29, 25, .0300110668458348 );
                  A.setElement( 37, 25, .0366555998208319 );
                  A.setElement( 13, 26, .0733111996416637 );
                  A.setElement( 14, 26, .0900332005375044 );
                  A.setElement( 20, 26, .109966799462496 );
                  A.setElement( 21, 26, .109966799462496 );
                  A.setElement( 22, 26, .0600221336916696 );
                  A.setElement( 26, 26, .386710934050006 );
                  A.setElement( 28, 26, .109966799462496 );
                  A.setElement( 30, 26, .0300110668458348 );
                  A.setElement( 36, 26, .0300110668458348 );
                  A.setElement( 15, 27, .109966799462496 );
                  A.setElement( 16, 27, .0600221336916696 );
                  A.setElement( 19, 27, .0900332005375044 );
                  A.setElement( 23, 27, .0733111996416637 );
                  A.setElement( 24, 27, .0900332005375044 );
                  A.setElement( 25, 27, .0900332005375044 );
                  A.setElement( 27, 27, .413289065949994 );
                  A.setElement( 31, 27, .0366555998208319 );
                  A.setElement( 37, 27, .0366555998208319 );
                  A.setElement( 17, 28, .0733111996416637 );
                  A.setElement( 18, 28, .0900332005375044 );
                  A.setElement( 19, 28, .0733111996416637 );
                  A.setElement( 21, 28, .120044267383339 );
                  A.setElement( 24, 28, .0733111996416637 );
                  A.setElement( 25, 28, .0366555998208319 );
                  A.setElement( 26, 28, .0600221336916696 );
                  A.setElement( 28, 28, .406644532974997 );
                  A.setElement( 32, 28, .0366555998208319 );
                  A.setElement( 36, 28, .0300110668458348 );
                  A.setElement( 19, 29, .146622399283327 );
                  A.setElement( 20, 29, .120044267383339 );
                  A.setElement( 25, 29, .0733111996416637 );
                  A.setElement( 29, 29, .569988933154165 );
                  A.setElement( 30, 29, .0600221336916696 );
                  A.setElement( 36, 29, .0300110668458348 );
                  A.setElement( 21, 30, .219933598924991 );
                  A.setElement( 22, 30, .0600221336916696 );
                  A.setElement( 26, 30, .0600221336916696 );
                  A.setElement( 29, 30, .109966799462496 );
                  A.setElement( 30, 30, .520044267383339 );
                  A.setElement( 36, 30, .0300110668458348 );
                  A.setElement( 19, 31, .180066401075009 );
                  A.setElement( 23, 31, .0733111996416637 );
                  A.setElement( 27, 31, .0733111996416637 );
                  A.setElement( 31, 31, .546622399283327 );
                  A.setElement( 32, 31, .0900332005375044 );
                  A.setElement( 37, 31, .0366555998208319 );
                  A.setElement( 21, 32, .120044267383339 );
                  A.setElement( 24, 32, .146622399283327 );
                  A.setElement( 28, 32, .0600221336916696 );
                  A.setElement( 31, 32, .0733111996416637 );
                  A.setElement( 32, 32, .563344400179168 );
                  A.setElement( 37, 32, .0366555998208319 );
                  A.setElement( 13, 33, .120044267383339 );
                  A.setElement( 17, 33, .219933598924991 );
                  A.setElement( 33, 33, .406644532974997 );
                  A.setElement( 34, 33, .180066401075009 );
                  A.setElement( 36, 33, .0733111996416637 );
                  A.setElement( 11, 34, .0900332005375044 );
                  A.setElement( 14, 34, .0600221336916696 );
                  A.setElement( 15, 34, .0733111996416637 );
                  A.setElement( 18, 34, .109966799462496 );
                  A.setElement( 33, 34, .0733111996416637 );
                  A.setElement( 34, 34, .466666666666667 );
                  A.setElement( 35, 34, .0600221336916696 );
                  A.setElement( 36, 34, .0366555998208319 );
                  A.setElement( 37, 34, .0300110668458348 );
                  A.setElement( 12, 35, .180066401075009 );
                  A.setElement( 16, 35, .146622399283327 );
                  A.setElement( 34, 35, .219933598924991 );
                  A.setElement( 35, 35, .393355467025003 );
                  A.setElement( 37, 35, .0600221336916696 );
                  A.setElement( 26, 36, .120044267383339 );
                  A.setElement( 28, 36, .219933598924991 );
                  A.setElement( 29, 36, .109966799462496 );
                  A.setElement( 30, 36, .0600221336916696 );
                  A.setElement( 33, 36, .146622399283327 );
                  A.setElement( 34, 36, .180066401075009 );
                  A.setElement( 36, 36, .163344400179168 );
                  A.setElement( 25, 37, .180066401075009 );
                  A.setElement( 27, 37, .146622399283327 );
                  A.setElement( 31, 37, .0733111996416637 );
                  A.setElement( 32, 37, .0900332005375044 );
                  A.setElement( 34, 37, .219933598924991 );
                  A.setElement( 35, 37, .120044267383339 );
                  A.setElement( 37, 37, .169988933154165  );
               };

               static void loadMatrixLRowMajor( std::vector< RealType >& l )
               {
                  l = {
                     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0.0600221, 0.741804437161625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0.763344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0.0900332, 0.762772554514871, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0.769989, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0.0600221, 0.702899728404692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0.0733112, 0, 0, 0, 0, 0.724435180573231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0.0733112, -0.010077265913, 0, 0, 0, 0, 0.111190083136129, 0.765620714160903, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0.0733112, -0.014081508161982, 0, 0, 0, 0, 0.728936471592769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0.109967, -0.03141016583094, 0, 0, 0, 0.802371595533317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0.0300111, 0.025885811707875, 0, 0, 0, 0, -0.003141774766912, -0.002878571588369, 0, 0, 0.624024624802606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0.0366556, 0.066270445919009, 0, 0, 0, 0, -0.00680154626027, 0, 0.0600221, 0.565490772553044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0.0300111, 0.051449949920713, 0, 0, 0, -0.003993886567511, 0, 0, 0.555225227137768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0.0366556, 0, 0, 0, 0, 0.032206690286616, -0.002364329906634, 0, 0, -0.002357299753956, 0.000415408578027, 0.0900332, 0.567472664150156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0.0300111, 0.027496914918859, 0, 0, 0.073831617782171, -0.013010771033628, 0, -0.002008374912813, 0.59624823429781, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0.0366556, -0.007040754080991, 0, 0, 0, 0, 0.064468435796385, 0, 0, 0.07103186634242, 0, -0.000034977201079, 0.061117475004894, 0.537430656617007, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0.0300111, -0.008572150079287, 0, 0, 0, 0.05522914323397, 0, 0, 0.107231142518369, -0.014158657336083, -0.000050109629263, 0.000007811588071, 0.592387135290922, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0.0366556, -0.0050386329565, 0, 0, 0, 0, 0.000611541568065, 0.032433209280769, 0, 0, -0.004318828366288, 0.000761073489858, 0, 0.110870754877101, -0.003287165783613, 0.000512436140553, 0.0918872920028, 0.60627694019951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.636656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0600221, 0.616187898755058, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0600221, -0.013823101244942, 0.622944381510515, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0300111, 0.030347724271877, 0.473842502737272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0366556, -0.008441791773265, -0.004315596100489, 0.003047286551593, 0.499236090498318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0733112, -0.026173248621146, 0.092168226645197, 0.615277814281069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0300111, 0.02472247756023, 0, 0.000127054744618, -0.003978951637458, -0.003066497585322, 0.00000191710682, 0.000102161261466, 0.0733112, 0.056427616453469, 0.028846714522883, -0.020368995112583, -0.018304442394118, -0.004434431253377, 0.361994370357743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0366556, 0.031815643363712, 0.000112600372752, -0.000017553267537, -0.00333192001094, -0.002971646916158, 0, 0.0600221, 0.030684347422089, 0.098377457282568, 0.002161357270996, -0.004861291764466, -0.005901108632972, 0.350583849546902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0300111, 0.024375094569955, 0.000001561039722, 0.000083186698581, 0.0366556, -0.008441791773265, -0.004315596100489, 0.003047286551593, 0.135891090498318, 0.063966253837272, 0.069172343824898, 0.005071996175283, 0.357242677762186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0366556, 0.032025847136338, 0.0300111, -0.006911562137481, 0.056488784868577, -0.018933921463654, -0.007037724297123, 0.049431779724875, 0.019373738888162, 0.106039481572781, -0.014288381946409, 0.359726768244093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0300111, 0.053110537862519, -0.002860067709334, -0.008457199198964, -0.007074700906742, 0.000978535375466, 0.019154629586364, -0.00734143402655, -0.007136380875136, -0.002904149016872, 0.550709475321815, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0300111, 0.04930766643877, 0.000662164569606, -0.00522448428549, -0.001829792997049, 0.019314297109936, 0.001184496032015, -0.007409688206466, 0.061688639284306, 0.488714136738555, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0366556, -0.008441791773265, -0.004315596100489, 0.003047286551593, 0.062580290498318, -0.003834574804009, -0.006545828217704, 0.00141613347877, 0.024787495962588, -0.001505030297978, -0.004300158062302, 0.001074978895789, 0.52420330586916, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0366556, -0.013086624310573, 0.001067513322598, 0.066005758434844, -0.002413491179207, -0.004182484190023, -0.007439436720028, 0.023948221232684, 0.000611643862317, -0.006895787994669, 0.09313556287578, 0.525497272801904, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0300111, -0.003962625699956, -0.000014024331546, 0.000002186252475, 0.026781218959589, -0.002960045680089, 0, 0, 0, 0, 0, 0, 0.000004728979619, -0.002930100729189, 0.000026817357677, -0.002445772695422, -0.000105995168782, 0.000159785366876, -0.000012119927746, 0.000239198909247, 0.39090722034855, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0366556, -0.00645953093033, 0, 0.030184334635132, 0.03133665447568, -0.004885069793992, 0.000506615205473, 0.026997168574655, 0, 0, 0, 0, 0, 0, -0.005361220661566, -0.003760683242331, -0.004073313475104, -0.002755679564729, 0.000400701220546, 0.000052056172936, 0.000323717088027, 0.000003799190094, 0.181993274946178, 0.41568045616282, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0366556, 0, -0.000018049790297, 0.000565262185789, 0.030894862630406, -0.00000043433202, -0.000023145244985, 0, 0, 0, 0, 0, 0, -0.002906690815882, -0.000102789982475, -0.00222375545667, 0.000121837281372, 0.000286974517338, -0.000077269855402, 0.000183320587805, -0.000155820398943, 0.000000465865287, 0.060794261818045, 0.341910054669529, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0300111, -0.000237603347308, 0.025046991322578, 0.031091895379049, 0.022216823595938, 0.000327904401142, -0.00235403884312, 0.074442976087186, 0.023093303859926, -0.012402158735341, 0.096531809587267, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0366556, 0.001334808342727, 0.028042956314551, -0.001504289870595, -0.003617580479232, 0.000972331792758, 0.034343942327877, 0.033314442381026, -0.000057062966045, 0.030535638718763, 0.044733805460121, -0.004426426811097, 0.104649619413751
                  };
               };

               static void loadMatrixURowMajor( std::vector< RealType >& u )
               {
                  u = {
                     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 1, 0.13745875, 0, 0, 0, 0, 0, 0.1125415, 0, 0, 0.13745875, 0, 0, 0, 0, 0, 0, 0.1125415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 1, 0, 0, 0, 0, 0.121370533107749, -0.009106142844058, 0, 0, 0.069791355467917, 0, 0, 0.121370533107749, 0, 0, 0, -0.009106142844058, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 1, 0.192078538640508, 0, 0, 0, 0, 0.23589102685028, 0, 0, 0.096039531325326, 0, 0, 0, 0.117945775430212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 1, 0, 0, 0, 0, -0.027843193718636, 0, 0, 0.106698193565765, 0, 0, 0, -0.013921627784861, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 1, 0.285632651895027, 0, 0, 0, 0.155903525894526, 0, 0, 0.142816325947514, 0, 0, 0, 0.077951892819248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -0.013312933044991, 0, 0, 0.073196733649502, 0, 0, 0, -0.00665647761254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 1, 0.083775172557532, 0, 0, -0.007062727151007, 0, 0, 0.088915312647106, 0.082853651519941, 0, 0, 0.000921521037591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -0.011217897436129, 0, 0, -0.011315547906344, 0.131598445203758, 0, 0, 0.084723959738509, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -0.007597783923791, 0, 0, 0, 0.088441748582195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -0.016707921177526, 0, 0, 0, 0.126108381328517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.176222212440391, 0, -0.004639232781672, 0.145302475981314, 0, 0, -0.004639232173921, 0, 0, 0, 0, 0, 0, 0.176222212440391, 0, 0, 0, 0, 0, 0, 0, 0, 0.144278280730476, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0.000492415628088, -0.015422638470692, 0.154262393293959, 0, 0.000492415563581, 0, 0, 0, 0, 0, 0, 0.087437099140364, 0, 0, 0, 0, 0, 0, 0, 0, -0.015313928739696, 0.318424293975742, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.132038669024326, 0, 0, 0.105414547284145, 0, 0, 0, 0, 0, 0, 0, 0, 0.132038669024326, 0, 0, 0, 0, 0, 0, 0.21620775521825, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.003539151211393, -0.000112925124838, -0.016724698153974, 0.106640179496432, 0, 0, 0, 0, 0, 0, 0.000668025934913, 0.13770766600895, 0, 0, 0, 0, 0, 0, -0.034302755527912, 0.106381456776313, -0.000233097013348, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.187797362643981, -0.000056334697974, -0.003009151365665, 0, 0, 0, 0, 0, 0, -0.019910843550455, 0.000463848118628, 0.184431573419259, 0, 0, 0, 0, 0, -0.000115543811587, 0.105112779118195, 0.006947571826603, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.000005317990944, 0.000284063646168, 0, 0, 0, 0, 0, 0, -0.009292169006963, -0.00004378722498, 0.090709577731023, 0, 0, 0, 0, 0, 0.000010907326493, -0.009922637869226, 0.229944273531952, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.126304108067027, 0, 0, 0, 0, 0, 0, 0.000014404789374, -0.020609627332994, 0.000014404789376, 0.123755557189804, 0, 0, 0, 0, 0.331310551593875, 0.002551647693394, -0.000008015755493, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0.00092111481974, -0.022056657556098, 0.000921114819849, 0.129745388227442, 0, 0, 0, 0, -0.043941045144116, 0.163165235278253, -0.000512567798402, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.230300193511095, 0.115150410896937, 0, 0.282830916538916, 0, 0.230300193511095, 0, 0.141415772410847, 0.115150410896937, 0.230300193511095, 0, 0.282830916538916, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.011216658898789, 0.178463420366055, -0.027550209262287, 0, 0.074975504790662, 0.178463420366055, -0.013775135231267, -0.011216658898789, 0.172383941602335, 0, -0.027550209262287, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.357015689569205, -0.027862736068757, 0.192704202113385, 0.075826019385765, 0.180487891480149, -0.013931398981627, 0.181360302562755, -0.018364754393371, 0.353055596178112, -0.027862736068757, 0.192704202113385, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.003529406305271, -0.012341936314252, -0.009604973117618, 0.103808373870745, 0.00176470707276, -0.010904990907973, -0.009741851312419, 0.104059188084026, 0.003529406305271, -0.012341936314252, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.075164523627055, -0.014927527750051, 0.003944286181168, 0.136099401913182, -0.007010085449418, -0.014093794934046, 0.002416786792196, 0.125352096311491, 0.001741145995418, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.007207225675873, -0.017680337470016, 0.127676755684685, 0.098128268713162, 0.00388501960601, -0.038002529640423, -0.015307644058475, 0.214555301243761, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.036414854557755, 0.234672894852953, 0.0654327222557, 0.129258864904801, -0.022622436262168, -0.044414566026378, -0.01333439108855, 0.000021508474763, -0.00992758825226, -0.019722372609083, 0, 0.497427625247455,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.007917182219508, 0.165094422883059, -0.022855697952393, 0.110182710267131, 0.004432367621053, -0.010662982306805, -0.016716108435987, -0.008448240922829, -0.000305957151643, 0.342411666011273, 0.008372817109004,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.039744569859948, -0.039733871643001, 0.01207864507036, 0.138771238281851, -0.033913105105825, 0.000250910944679, -0.006149035914724, -0.01244974567392, -0.004861431090093, 0.313991875451956,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.016142124134873, -0.075476017287559, -0.008410716924632, 0.109009587376384, -0.024911690669132, -0.012005543164778, 0.000704318322278, 0.510263340599995, -0.0167862021995,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.205226766227553, -0.007851163833709, 0.000909434105615, -0.000351707876309, 0.000089683083031, 0.000524283508858, 0.206874923196954, -0.013209428504308,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.00120713025898, -0.006305487854845, 0.000326797499085, 0.0001182698619, -0.000087076250717, 0.09091915722775, 0.002183369464559,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.144671728006805, -0.000041516280645, 0.00015564297117, 0.000349750104777, 0.002280455974914, 0.131033002263455,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.001017949441166, 0.000321097905114, -0.000365103714815, -0.020049391190584, 0.155711525189052,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.189545991201309, -0.000003113782806, 0.380872071585509, -0.000165516813723,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.535897028894508, 0.272650721556681, 0.538532246399486,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.048753888577852, 0.26163473468107,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.085461740747497,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
                  };
               };

               static void loadMatrixZRowMajor( std::vector< RealType >& z )
               {
                  std::vector< RealType > l, u;
                  loadMatrixLRowMajor( l );
                  loadMatrixURowMajor( u );
                  z = l;

                  IndexType n = z.size();

                  for( IndexType i = 0; i < n; ++i )
                  {
                     if( u[i] == 0 )
                        continue;

                     // Index of diagonal in 1D vector representing a matrix:
                     // 39 = length of row + 1
                     if( (i % (numCols + 1) == 0) && u[i] == 1 )
                        continue;

                     z[i] = u[i];
                  }
               };
         };
   };

} // namespace Decomposition